import{ab as e,H as a,I as n,G as i,V as o,O as t,ac as r,Y as s}from"./framework-c2f60e5e.js";const c={},d=i("h1",{id:"ctf-逆向学习笔记",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#ctf-逆向学习笔记","aria-hidden":"true"},"#"),o(" CTF 逆向学习笔记")],-1),g=i("h2",{id:"尚未搞懂的知识点",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#尚未搞懂的知识点","aria-hidden":"true"},"#"),o(" 尚未搞懂的知识点")],-1),p=i("p",null,[i("code",null,"crackme")],-1),h=i("p",null,"资料来源：",-1),u={href:"https://www.freebuf.com/column/225999.html",target:"_blank",rel:"noopener noreferrer"},_=r('<h2 id="逆向常见方向" tabindex="-1"><a class="header-anchor" href="#逆向常见方向" aria-hidden="true">#</a> 逆向常见方向</h2><ol><li><p>暴力破解：逆向中的暴力破解和web中的爆破还不一样，这里的暴力破解主要是通过修改汇编代码来跳过程序验证部分（俗称打补丁）的形式来过掉程序的最终校验，进而满足题目要求来获取flag，此类题目比较考验选手查找程序中验证代码 的能力。</p></li><li><p>算法破解：这类题目通常需要逆向分析其程序加密部分汇编代码，然后还原其加密算法实现过程，然后根据分析结果编写出对应的解密程序，进而算出flag，此类题目比较考验选手的耐心和细心程度，不仅需要选手有扎实的逆向功底，还需要选手具备一定的编程能力。</p></li></ol><figure><img src="https://picgo-hk-1258675557.cos.ap-hongkong.myqcloud.com/20190520123610921.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><figure><img src="https://picgo-hk-1258675557.cos.ap-hongkong.myqcloud.com/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTA0OTM5,size_16,color_FFFFFF,t_70-1668519791099-4.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><h2 id="解题流程" tabindex="-1"><a class="header-anchor" href="#解题流程" aria-hidden="true">#</a> 解题流程</h2><ol><li><strong>突破保护</strong>：拿到程序时先查看程序属于哪平台下的，例如windows x86/x64、android、Linux等，有没有设置保护措施，例如：代码混淆、保护壳、各种反调试等，如果有则通过去混淆、脱壳、反反调试等技术来去除或绕过这些保护措施。</li><li><strong>定位关键代码</strong>：我们需要将目标软件进行反汇编，然后结合IDA和OD快速定位到关键代码（例如验证函数）。</li><li><strong>动静结合</strong>：我们找到程序的关键代码之后就要对其进行详细的逆向分析了，如果程序在IDA中<code>F5</code>可以生成伪代码，那么我们就先根据伪代码进行静态分析，然后模糊不清的地方可以结合OD进行动态调试观察来验证自己的猜想。 <ul><li>可以先找标准的<code>flag{xxx}</code>字符串（用Shift+F12列出字符串，用X并点击相应字符串定位，用Ctrl+X交叉引用）</li></ul></li><li><strong>破解验证算法</strong>：我们详细分析完程序的关键代码（例如：验证算法）之后，我们就要根据我们分析出的结果来进行暴力破解或者进行代码的编写，对算法进行破解来编写逆算法生成flag。</li></ol><h3 id="常见验证算法" tabindex="-1"><a class="header-anchor" href="#常见验证算法" aria-hidden="true">#</a> 常见验证算法</h3><ol><li>直接比较验证，没有加密。</li><li>加密比较。加密算法：异或、<code>base64</code>、<code>MD5</code>、<code>R&#39;C&#39;&#39;4&#39;</code>……需要识别算法。</li><li>作者自己编写的算法，需要自己分析。</li><li>其他类型的加密题目：实在解不出来的，也可以看其是否可以绕过或暴力破解穷举等。</li></ol><h2 id="前置基础" tabindex="-1"><a class="header-anchor" href="#前置基础" aria-hidden="true">#</a> 前置基础</h2><ol><li><p>基础知识：汇编语言、C语言（培养编程思维对逆向来说很重要）、一门脚本语言（建议python）、windows核心编程（掌握常用API）、PE文件格式、程序加载流程、各种过保护手段（反混淆、反反调试、脱壳等）。</p></li><li><p>常用工具：查壳工具（DIE、PEID、EXEINFO、LordPE、ResourceHacker等）、常用脱壳工具或脱壳脚本（专属壳的脱壳器例如upx等、各种壳的脱壳脚本）、十六进制编辑器（010Editor、winhex等）、反汇编工具（IDA、Hopper）、调试器（Ollydbg、gdb、windbg等），这些都是比较常用的逆向工具。<strong>其中特别要熟练使用IDA与Ollydbg，IDA一般用来做静态分析，其中的F5功能更是强大到没朋友，新手必备。Ollydbg简称OD一般用来做动态调试使用</strong>，两者结合使用堪比倚天剑和屠龙刀，可谓是神挡杀神佛挡杀佛。</p></li><li><p>定位验证代码：如果给你一个程序需要你找到他验证部分的代码，那么你如何查找呢？这里给大家总结了几个常用的方法：</p><blockquote><ol><li><p><strong>顺序跟踪</strong>：如果大家拿到的程序较小，<strong>代码量不多且主函数入口好找</strong>，即可使用顺序跟踪法，从程序主函数入口顺序跟踪，一步步看完整个程序的执行过程，基本就知道程序的验证部分了，至于各个类型程序主函数的查找方法大家可以自行百度，这里还需要分清楚程序入口点和main函数的区别，大家一般需要找main函数，但也不全是找main函数，如果遇到了MFC的程序大家还需要根据具体情况具体分析，如果有条件大家也可以自己编写相应程序然后反汇编来练习查找程序的主函数，这个需要大家平时多练习、多积累、多总结。</p></li><li><p><strong>字符串查找</strong>：如果给定的程序<strong>没有做混淆</strong>处理而且还有<strong>比较明显的字符串提示</strong>，那么我们就可以根据程序运行的提示使用字符串查找功能查找程序所提示字符串的方式来反向查找其被引用的地址，例如<strong>IDA中shift+F12的字符串窗口，OD中查找-&gt;所有参考文本字串</strong>，字符串搜索的优先级很高，很多情况下对我们解题有奇效，所以拿到程序后可以优先尝试。</p></li><li><p><strong>API断点</strong>：如果<strong>程序非常大</strong>而且也没有啥字符串提示信息可以利用，那么我们就可以根据程序所使用的API来定位关键验证代码，这需要大家<strong>掌握C语言</strong>还有<strong>Windows核心编程</strong>的知识，熟悉哪些API具有哪些功能，例如：程序出现了一个弹窗，那么程序就有可能调用了Messagebox这个API，如果程序出现了输出，那么程序就有可能调用了printf这个API等等，所以我们可以通过程序所表现出的状态来下相应的API断点，然后栈回溯反向查找其引用位置，进而找到关键代码。</p></li></ol></blockquote></li></ol><h3 id="推荐书籍" tabindex="-1"><a class="header-anchor" href="#推荐书籍" aria-hidden="true">#</a> 推荐书籍</h3><ul><li><p>《C Primer Plus》和《C++ Primer Plus》：学习C和C++不错的入门书，比较全面。</p></li><li><p>《逆向工程核心原理》：韩国人写的，通俗易懂，用来入门逆向很不错的书籍，帮助快速构建逆向知识体系。</p></li><li><p>《加密与解密第四版》：看雪论坛段钢老师出版的，二进制安全界圣经级别的书籍，知识点比较全，用来做工具书不错。</p></li><li><p>《汇编语言基于x86处理器》：讲汇编语言挺不错的，推荐看前十章，没必要看完，PS：学逆向不推荐看王爽老师的汇编书。</p></li><li><p>《IDA pro权威指南 第二版》：学习IDA的工具书。</p></li></ul><h4 id="更多书籍" tabindex="-1"><a class="header-anchor" href="#更多书籍" aria-hidden="true">#</a> 更多书籍</h4><ul><li>C++ Primer Plus 第6版</li><li>数据结构c语言第2版（严蔚敏）</li><li>Windows API开发详解 函数、接口、编程实例</li><li>[Windows程序设计(第5版,珍藏版)]</li><li>Windows核心编程 第5版</li><li>逆向工程核心原理</li><li>MFC Windows程序设计(第2版)</li><li>深入浅出MFC第二版</li><li>Windows环境下32位汇编语言程序设计（典藏版）</li><li>windows PE权威指南</li><li>C++反汇编与逆向分析技术揭秘（第2版）</li><li>恶意代码分析实战</li><li>加密与解密（第4版）</li><li>IDA Pro权威指南(第二版)</li><li>深入理解计算机操作系统</li><li>现代操作系统</li><li>Windows内核原理与实现</li><li>Windows内核情景分析</li><li>Windows核心编程</li><li>深入解析Windows操作系统第7版</li><li>x86_x64体系探索及编程</li><li>软件调试 第2版</li><li>处理器虚拟化技术</li></ul><h2 id="推荐做题平台" tabindex="-1"><a class="header-anchor" href="#推荐做题平台" aria-hidden="true">#</a> 推荐做题平台</h2><p><strong>看雪论坛、攻防世界、CTFwiki、吾爱破解</strong>等都可以找到逆向题目来做。</p><h2 id="ida-pro-基本使用" tabindex="-1"><a class="header-anchor" href="#ida-pro-基本使用" aria-hidden="true">#</a> IDA Pro 基本使用</h2><ul><li><strong>先用PEID分析一下程序的基本信息</strong></li></ul><figure><img src="https://picgo-hk-1258675557.cos.ap-hongkong.myqcloud.com/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjI4MTQw,size_16,color_FFFFFF,t_70.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://picgo-hk-1258675557.cos.ap-hongkong.myqcloud.com/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjI4MTQw,size_16,color_FFFFFF,t_70-1668601280611-3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以选择用静态分析工具IDA来分析程序，也可以选用动态调试工具<strong>Ollydbg</strong>。</p><ul><li><strong>按Ctrl+E弹出入口函数的信息</strong>，点击确定进入入口函数。因为此程序是一个控制台程序，所以我们需要找到main函数（处理逻辑在main函数里）。</li></ul><blockquote><p>一般经过IDA的处理后都会显示出main函数的函数名，这种情况我们就可以直接通过寻找main函数名来寻找main函数。 但是有的程序在编译时，进行一些设置后IDA无法显示出main函数的函数名，这时我们就不能直接通过查找main函数名来寻找main函数，我们需要通过代码特征进行定位main函数，因为main（）结束后会调用exit（）函数来退出进程，所以<strong>我们只要找到exit函数，那么在其上方的函数就是main函数</strong>（也有可能是在这个上方<strong>函数的函数</strong>才是main函数 ）。</p></blockquote><ul><li><code>shift+F12</code> 打开字符串窗口，找到可能与 flag 有关的字符串双击进入</li></ul><figure><img src="https://picgo-hk-1258675557.cos.ap-hongkong.myqcloud.com/resize,m_fixed,w_1184.webp" alt="buuctf reverse wp(1-10)_Reverse_02" tabindex="0" loading="lazy"><figcaption>buuctf reverse wp(1-10)_Reverse_02</figcaption></figure><ul><li><p>点按住该字符串，并按x即可查看引用。双击进入。</p></li><li><p>Ctrl+x 交叉引用</p></li><li><p>F5 查看伪代码</p></li></ul><figure><img src="https://picgo-hk-1258675557.cos.ap-hongkong.myqcloud.com/resize,m_fixed,w_1184-1668604522847-17.webp" alt="buuctf reverse wp(1-10)_writeup_05" tabindex="0" loading="lazy"><figcaption>buuctf reverse wp(1-10)_writeup_05</figcaption></figure><h2 id="gda-4-03-基本使用" tabindex="-1"><a class="header-anchor" href="#gda-4-03-基本使用" aria-hidden="true">#</a> GDA 4.03 基本使用</h2><blockquote><p>安卓 APK 包反编译器</p></blockquote><figure><img src="https://picgo-hk-1258675557.cos.ap-hongkong.myqcloud.com/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyODgwNzE5,size_16,color_FFFFFF,t_70.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',30);function m(f,b){const l=s("ExternalLinkIcon");return a(),n("div",null,[d,g,p,i("blockquote",null,[h,i("p",null,[o("[CTF逆向选手入坑指南]("),i("a",u,[o("CTF逆向选手入坑指南 - FreeBuf网络安全行业门户"),t(l)]),o(")（后面还有进阶知识）")])]),_])}const F=e(c,[["render",m],["__file","CTF 逆向学习笔记.html.vue"]]);export{F as default};
